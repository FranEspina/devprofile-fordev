---
import { Button } from "@/components/ui/button";
const { user } = Astro.locals;
---

<input type="file" id="fileInput" style="display: none;" />
<Button id="selectFileButton" variant="outline">Importar Resumen JSON</Button>

<script>
  import { type ResumeJson } from "@/types/apiTypes.ts";
  import { EVENTS_UPDATE } from "@/components/ZustandStoreProvider";

  const { importResumeAsync } = await import("@/services/apiService.ts");
  const { useNotify } = await import("@/hooks/useNotify");

  const { notifySuccess, notifyError } = useNotify();
  const $button = document.getElementById("selectFileButton");
  const $inputFile = document.getElementById("fileInput");
  const userId = Number(getCookie("id"));
  const token = getCookie("token");

  const importResume = async (file: string) => {
    const resumeJson = {
      userId: userId,
      json: file,
      deletePrevious: true,
    };

    try {
      const result = await importResumeAsync(resumeJson, token);
      if (result.success) {
        window.dispatchEvent(new Event(EVENTS_UPDATE.RefreshAll));
        notifySuccess(result.message);
      } else {
        console.log(result);
        notifyError(result.message);
      }
    } catch (error) {
      console.log(error);
      notifyError("Error inesperado importando resumen");
    }
  };

  if ($button && $inputFile) {
    $button.addEventListener("click", () => {
      $inputFile.click();
    });

    $inputFile.addEventListener("change", async () => {
      const fileList: FileList = $inputFile.files; // AquÃ­ obtenemos la lista de archivos
      if (fileList && fileList[0]) {
        const file = fileList[0];
        try {
          const contents = await readAsText(file);
          await importResume(contents);
        } catch (error) {
          notifyError("Error inesperado importando fichero");
        }
      }
    });
  }

  function getCookie(name: string): string {
    const cookies = document.cookie.split(";");
    const path = `${name}=`;
    const cookie = cookies.find((cookie) => cookie.trim().startsWith(path));
    if (!cookie) return "";
    return cookie.split("=")[1];
  }

  function readAsText(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      let reader = new FileReader();
      reader.onload = function (event) {
        resolve((event?.target?.result as string) ?? "");
      };
      reader.onerror = function (event) {
        reject(
          new Error("Error reading file: " + (event?.target?.error ?? "")),
        );
      };
      reader.readAsText(file);
    });
  }
</script>
